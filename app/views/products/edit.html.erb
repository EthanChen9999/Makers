<div class="row">
  <div class="col-md-10 col-md-offset-1 page-header">
    <h1><%= t("products.change_model_desc") %><small> -<%= @product.title %></small></h1>
  </div>
</div>
<%= form_for @product, 'roll': 'form', 'multiple': 'true' do |product| %>
  <div class="row">
    <div class="col-md-5 col-md-offset-1">
      <div class="col-md-12", id="drawing-box", drawing-target="<%= @product.id %>", style="display: block;"></div>
    </div>
    <div class="col-md-5">
      <div class="form-group">
        <%= product.fields_for :drawing do |drawing| %>
          <%= product.label t("products.change_model_drawing").to_sym %>
          <%= drawing.file_field :drawing, class: 'form-controller file-loading', id: 'input-drawing', 'data-show-preview': "false", accept: 'stl' %>
        <% end %>

      </div>
      <div class="form-group">
        <%= product.label t("products.title").to_sym %>
        <%= product.text_field :title, class: 'form-control' %>
      </div>
      <div class="form-group">
        <%= product.label t("products.tag").to_sym %>
        <%= product.text_field :tags, class: 'form-control' %>
      </div>
      <div class="form-group">
        <%= product.label t("products.expect_print_time").to_sym %>
        <%= product.number_field :print_time, class: 'form-control' %>
      </div>
      <div class="form-group">
        <%= product.label t("products.dimensions").to_sym %>
        <%= product.text_field :dimensions, class: 'form-control' %>
      </div>
      <div class="form-group">
        <%= product.label t("products.expect_print_quantity").to_sym %>
        <%= product.number_field :quantity, class: 'form-control' %>
      </div>
    </div>
  </div>

  <div class="row" style="margin-top: 20px;">
    <div class="col-md-10 col-md-offset-1">
      <div class="form-group">
        <%= product.label t("products.desc").to_sym %>
        <%= product.text_area :description, class: 'form-control' %>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="col-md-10 col-md-offset-1">
      <div class="form-group">
        <%= product.label t("products.change_model_images").to_sym %>
        <%= product.fields_for :product_image do |image| %>
          <%= image.file_field(:images, class: 'file-loading form-control', id: 'input-image', 'multiple': 'true') %>
        <% end %>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="col-md-10 col-md-offset-1">
      <%= product.submit t("action.confirm"), class: 'btn btn-default btn-block' %>
    <% end %>
    </div>
  </div>


  <script>
    // For drawing fileinput
    $("#input-drawing").fileinput({
      language: "zh",
      theme: "fa",
      browseClass: "btn btn-default btn-block",
      allowedFileExtensions: ["stl"],
      showRemove: false,
      showUpload: false
    });
    // For image fileinput
    $("#input-image").fileinput({
      language: "zh",
      theme: "fa",
      initialPreview: [
          <% @product.product_image.images.each do |image| %>
          '<%= image.url %>',
          <% end %>
      ],
      initialPreviewAsData: true,
      initialPreviewConfig: [
          <% @product.product_image.images.each do |image| %>
          {caption: "<%= t("products.uploaded_model_images").to_s %>", size: <%= image.size %>, width: "120px", showDelete: false},
          <% end %>
      ],
      allowedFileExtensions: ["jpg", "png","jpeg"],
      browseClass: "btn btn-default btn-block",
      showCaption: false,
      showUpload: false,
      showRemove: false,
      minImageWidth: 50,
      minImageHeight: 50
    });
    // For tinyMCE
    tinyMCE.init({
      language: 'zh_CN',
      selector: 'textarea',
      plugins: [
        "advlist autolink lists link charmap print preview hr anchor pagebreak",
        "searchreplace wordcount visualblocks visualchars code fullscreen",
        "insertdatetime nonbreaking save table contextmenu directionality",
        "emoticons template paste textcolor colorpicker textpattern imagetools"
      ],
      toolbar1: "insertfile undo redo | formatselect fontselect fontsizeselect | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | table hr pagebreak",
      toolbar2: "bold italic underline strikethrough subscript superscript | forecolor backcolor charmap emoticons | link unlink image media | insertdatetime fullscreen code",
      menubar: false,
      image_advtab: true
    });

    //  For laod stl model
    var drawingBox=document.getElementById('drawing-box');
    var imagePara=document.createElement("img");
    // Set up the scene, camera, and renderer as global variables.
    var scene, camera, renderer;
    init();
    animate();
    // Sets up the scene.
    function init() {
      // Create the scene and set the scene size.
      scene = new THREE.Scene();
      var WIDTH = document.getElementById('drawing-box').clientWidth,
          HEIGHT = document.getElementById('drawing-box').clientHeight;
      // Create a renderer and add it to the DOM.
      renderer = new THREE.WebGLRenderer({antialias:true});
      renderer.setSize(WIDTH, HEIGHT);
      document.getElementById('drawing-box').appendChild(renderer.domElement);
      // Create a camera, zoom it out from the model a bit, and add it to the scene.
      camera = new THREE.PerspectiveCamera(45, WIDTH / HEIGHT, 0.1, 20000);
      camera.position.set(0,6,0);
      scene.add(camera);
      // Create an event listener that resizes the renderer with the browser window.
      window.addEventListener('resize', function() {
        var WIDTH = window.innerWidth,
            HEIGHT = window.innerHeight;
        renderer.setSize(WIDTH, HEIGHT);
        camera.aspect = WIDTH / HEIGHT;
        camera.updateProjectionMatrix();
      });
      // Set the background color of the scene.
      renderer.setClearColor(0x333F47, 1);
      // Create a light, set its position, and add it to the scene.
      var light = new THREE.PointLight(0xffffff);
      light.position.set(-100,200,100);
      scene.add(light);

      // Load in the mesh and add it to the scene.

      var loader = new THREE.STLLoader();
      var drawingTarget = drawingBox.getAttribute('drawing-target');
      loader.load( "/products/get_json/"+drawingTarget,  function(geometry){
        var material = new THREE.MeshLambertMaterial({color: 0x55B663});
        mesh = new THREE.Mesh(geometry, material);
        scene.add(mesh);
      });


      // Add OrbitControls so that we can pan around with the mouse.
      controls = new THREE.OrbitControls(camera, renderer.domElement);
    }
    // Renders the scene and updates the render as needed.
    function animate() {
      // Read more about requestAnimationFrame at http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/
      requestAnimationFrame(animate);
      // Render the scene.
      renderer.render(scene, camera);
      controls.update();
    };

  </script>
